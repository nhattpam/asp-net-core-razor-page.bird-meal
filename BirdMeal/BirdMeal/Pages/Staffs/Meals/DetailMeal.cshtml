@page "{id}/{total?}"
@model BirdMeal.Pages.Staffs.Meals.DetailMealModel
@{
    ViewData["Title"] = "Staff - Detail Combo";
    Layout = "~/Pages/Shared/StaffLayout.cshtml";
}

<h1 class="mb-3">Detail Combo @Model.mealViewModel.MealId</h1>
@if (!string.IsNullOrEmpty(TempData["DeleteSuccessMessage"] as string))
{
    <div class="alert alert-success">@TempData["DeleteSuccessMessage"]</div>
}

@if (!string.IsNullOrEmpty(TempData["DeleteErrorMessage"] as string))
{
    <div class="alert alert-danger">@TempData["DeleteErrorMessage"]</div>
}
<table class="table">
    <thead>
        <tr>
            <th>Product</th>
            <th>Quantity</th>
            <th>Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            Model.Total = 0f; // Initialize a variable to store the total price
         }
        @foreach (var item in Model.ListMealProductsDetail)
        {
            var totalPrice = (float?)@item.Product.Price * @item.Quantity;
            Model.Total += totalPrice;
            <tr>
                <td>@item.Product.ProductName</td>
                <td>@item.Quantity</td>
                <td>
                    @totalPrice $
                </td>
                <td>
                    <form method="post">
                        <input type="hidden" name="total" asp-for="@Model.Total" />
                        <input type="hidden" name="productId" value="@item.Product.ProductId" />
                        <input type="hidden" name="mealId" value="@Model.mealViewModel.MealId" />
                        <button type="submit" class="btn btn-danger">
                            <i class="fas fa-trash-alt"></i> 
                        </button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
    
</table>
<h2>Total Price : <span id="totalDisplay">@Model.Total</span> $</h2>



<button class="btn btn-primary" id="addProductBtnAsk" type="button">
    <i class="fas fa-plus-circle"></i> Add Product
</button>
<form method="post" class="mb-3" asp-page-handler="AddProduct" onsubmit="return validateForm()">
    <input type="hidden" asp-for="Total" id="totalInput" />
    <input type="hidden" name="mealId" value="@Model.mealViewModel.MealId" />
    <div id="addProductSection" style="display: none;">
        <div class="mb-3">
            <label for="productName">Product Name</label>
            <select class="form-control" id="productName" asp-for="AddMealProduct.ProductId">
                @foreach (var product in Model.ListProducts)
                {
                    <option value="@product.ProductId" data-price="@product.Price" data-quantity="@product.Quantity">@product.ProductName</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="quantity">Quantity</label>
            <input type="number" class="form-control" id="quantity" asp-for="AddMealProduct.Quantity" min="1">
        </div>
    </div>
    <button class="btn btn-primary" id="addProductBtn" type="submit">
        <i class="fas fa-plus-circle"></i> Add Product
    </button>
</form>


@section Scripts {
    <script>
        $(document).ready(function () {
            $('#addProductBtn').hide();
            // Show the "Add Product" section when the button is clicked
            $('#addProductBtnAsk').click(function () {
                $('#addProductSection').show();
                $('#addProductBtnAsk').hide();
                $('#addProductBtn').show();
            });

            // Update the Total value when the quantity is changed
            $('#quantity').on('input', function () {
                var quantity = $(this).val();
                var price = $('#productName option:selected').data('price'); // Retrieve the price directly
                var total = @Model.Total + parseFloat(quantity) * parseFloat(price);
                $('#totalInput').val(total.toFixed(2));
                $('#totalDisplay').text(total.toFixed(2)); // Update the total display
            });
        });

        function validateForm() {
            if (!validateQuantity()) {
                return false; // Prevent form submission if quantity validation fails
            }

            var selectedProductId = $('#productName').val();
            var existingProducts = [];
            $('input[name="productId"]').each(function () {
                existingProducts.push($(this).val());
            });

            if (existingProducts.includes(selectedProductId)) {
                alert('Product already added.');
                return false; // Prevent form submission if duplicate product is found
            }

            return true; // Proceed with form submission
        }

        function validateQuantity() {
            var selectedQuantity = parseInt(document.getElementById('quantity').value);
            var maxQuantity = parseInt(document.getElementById('productName').options[document.getElementById('productName').selectedIndex].getAttribute('data-quantity'));

            if (selectedQuantity > maxQuantity) {
                alert('Quantity exceeds product availability.');
                return false; // Prevent form submission
            }

            return true; // Proceed with form submission
        }
    </script>
}
