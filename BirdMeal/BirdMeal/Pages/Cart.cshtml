@page
@model BirdMeal.Pages.CartModel
@{
	ViewData["Title"] = "Cart";
}
<style>

	.checkout-right-basket button {
		padding: 10px 20px 10px 18px;
		color: #fff;
		font-size: 1em;
		background: #212121;
		text-decoration: none;
	}

		.checkout-right-basket button:hover {
			background: #84c639;
		}

		.checkout-right-basket button span {
			left: -.5em;
			top: 0.1em;
		}

</style>

<!-- products-breadcrumb -->
<div class="products-breadcrumb" style="position: fixed; top: 0; left: 0; width: 100%; z-index: 999; ">
	<div class="container">
		<ul>
			<li><i class="fa fa-home" aria-hidden="true"></i><a href="/Index">Home</a><span>|</span></li>
			<li>Checkout</li>
		</ul>
	</div>
</div>
<!-- //products-breadcrumb -->
<!-- banner -->
<div class="banner">
	<div class="w3l_banner_nav_left">
		<nav class="navbar nav_bottom">
			<!-- Brand and toggle get grouped for better mobile display -->
			<div class="navbar-header nav_2">
				<button type="button" class="navbar-toggle collapsed navbar-toggle1" data-toggle="collapse" data-target="#bs-megadropdown-tabs">
					<span class="sr-only">Toggle navigation</span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
			</div>
			<!-- Collect the nav links, forms, and other content for toggling -->
			<div class="collapse navbar-collapse" id="bs-megadropdown-tabs">
				<ul class="nav navbar-nav nav_1">
					<li><a href="products.html">Branded Foods</a></li>
					<li><a href="household.html">Households</a></li>
					<li class="dropdown mega-dropdown active">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown">Veggies & Fruits<span class="caret"></span></a>
						<div class="dropdown-menu mega-dropdown-menu w3ls_vegetables_menu">
							<div class="w3ls_vegetables">
								<ul>
									<li><a href="vegetables.html">Vegetables</a></li>
									<li><a href="vegetables.html">Fruits</a></li>
								</ul>
							</div>
						</div>
					</li>
					<li><a href="kitchen.html">Kitchen</a></li>
					<li><a href="short-codes.html">Short Codes</a></li>
					<li class="dropdown">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown">Beverages<span class="caret"></span></a>
						<div class="dropdown-menu mega-dropdown-menu w3ls_vegetables_menu">
							<div class="w3ls_vegetables">
								<ul>
									<li><a href="drinks.html">Soft Drinks</a></li>
									<li><a href="drinks.html">Juices</a></li>
								</ul>
							</div>
						</div>
					</li>
					<li><a href="pet.html">Pet Food</a></li>
					<li class="dropdown">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown">Frozen Foods<span class="caret"></span></a>
						<div class="dropdown-menu mega-dropdown-menu w3ls_vegetables_menu">
							<div class="w3ls_vegetables">
								<ul>
									<li><a href="frozen.html">Frozen Snacks</a></li>
									<li><a href="frozen.html">Frozen Nonveg</a></li>
								</ul>
							</div>
						</div>
					</li>
					<li><a href="bread.html">Bread & Bakery</a></li>
				</ul>
			</div><!-- /.navbar-collapse -->
		</nav>
	</div>
	<div class="w3l_banner_nav_right">
		<!-- about -->
		<div class="privacy about">
			<h3>Chec<span>kout</span></h3>



			<div class="checkout-right">
				<table class="timetable_sub">
					<thead>
						<tr>
							<th>SL No.</th>
							<th>Combo Image</th>
							<th>Quantity</th>
							<th>Combo Name</th>

							<th>Price</th>
							<th>Remove</th>
						</tr>
					</thead>
					<tbody>
						@{
							int counter = 1;
						}
						@if(Model.CartItems!=null&& Model.CartItems.Any()){
							@foreach (var cart in Model.CartItems)
							{
								var item = cart.Meal;
								<tr class="rem1">
									<td class="invert">@counter</td>
									<td class="invert-image">
										<img src="~/images/combo.jpg" class="img-responsive" style="width:50px; height:65px" />
									</td>
									<td class="invert">
										<div class="quantity">
											<div class="input-group w-auto justify-content-end align-items-center">
												<input type="button" value="-" class="button-minus border rounded-circle icon-shape icon-sm mx-1" data-field="@cart.quantity">
												<input readonly min="1" type="number" step="1" max="10" value="@cart.quantity" class="quantity-field border-0 text-center w-25" data-price="@cart.price">
												<input type="button" value="+" class="button-plus border rounded-circle icon-shape icon-sm" data-field="@cart.quantity">
											</div>
										</div>
									</td>
									<td class="invert">@item.MealId</td>

									<td class="invert price">@cart.price</td>
									<td class="invert">
										<div class="rem">
											<form method="post" asp-page-handler="RemoveFromCart" asp-route-cartId="@cart.cartId">
												<button type="submit" class="close1" aria-label="Remove"></button>
											</form>
										</div>

									</td>
								</tr>
								counter++;
							}
						}else{
							<h1>Empty Cart</h1>
						}
						
					</tbody>
					<tfoot>
						<tr>
							<td colspan="4"></td>
							<td>Total Price:</td>
							<td id="total-price"></td>

						</tr>
					</tfoot>
				</table>
			</div>
			<div class="checkout-left">
				<div class="col-md-8 address_form_agile">
					<h4>Add a new Details</h4>
					<form action="payment.html" method="post" class="creditly-card-form agileinfo_form">
						<section class="creditly-wrapper wthree, w3_agileits_wrapper">
							<div class="information-wrapper">
								<div class="first-row form-group">
									
									<input type="hidden" asp-for="UserCart.UserId"/>
									<div class="controls">
										<label class="control-label">Full name: </label>
										<input class="billing-address-name form-control" type="text" asp-for="UserCart.FullName" readonly />
									</div>
									<div class="w3_agileits_card_number_grids">
										<div class="w3_agileits_card_number_grid_left">
											<div class="controls">
												<label class="control-label">Mobile number:</label>
												<input class="form-control" type="number" asp-for="UserCart.Phone" readonly />
											</div>
										</div>
										<div class="w3_agileits_card_number_grid_right">
											<div class="controls">
												<label class="control-label">Address: </label>
												<input class="form-control" type="text" asp-for="UserCart.Address" readonly />
											</div>
										</div>
										<div class="clear"> </div>
									</div>
									<div class="controls">
										<label class="control-label">Email: </label>
										<input class="form-control" type="text" asp-for="UserCart.Email" readonly />
									</div>
									<div class="controls">
										<label class="control-label">Balance: </label>
										<input class="form-control" type="text" asp-for="UserCart.Wallet.Balance" readonly>
									</div>
									
									
								</div>
							</div>
						</section>
					</form>
					<div class="checkout-right-basket">
						@if (Model.CartItems != null && Model.CartItems.Any())
						{
							<form asp-page-handler="Checkout" method="post">
								<input type="hidden" name="totalPrice" id="hidden-total-price" value=""/>
								<button type="submit" id="payment-button" >Make a Payment <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></button>
							</form>
						}
						else
						{
							<button disabled>Make a Payment <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></button>
						}
					</div>
				</div>

				<div class="clearfix"> </div>

			</div>

		</div>
		<!-- //about -->
	</div>
	<div class="clearfix"></div>
</div>
<!-- //banner -->
@section Scripts {
	<script>
		$(document).ready(function () {
			// Retrieve the product quantity dictionary from the hidden input fields
			var productQuantity = {};
			$('input[name^="productQuantity"]').each(function () {
				var productId = parseInt($(this).attr('name').match(/\d+/)[0]);
				var quantity = parseInt($(this).val());
				productQuantity[productId] = quantity;
				
			});
			console.log(productQuantity);

			
			$('.button-plus').click(function () {
				var inputField = $(this).siblings('.quantity-field');
				var currentValue = parseInt(inputField.val());

				if (!isNaN(currentValue)) {
					inputField.val(currentValue + 1);
					checkQuantity(inputField);
					updatePrice(inputField);
				}
			});

			$('.button-minus').click(function () {
				var inputField = $(this).siblings('.quantity-field');
				var currentValue = parseInt(inputField.val());

				if (!isNaN(currentValue) && currentValue > 1) {
					inputField.val(currentValue - 1);
					checkQuantity(inputField);
					updatePrice(inputField);
				}
			});

			$('.quantity-field').change(function () {
				var inputField = $(this);
				checkQuantity(inputField);
				updatePrice(inputField);
			});

			function checkQuantity(inputField) {
				var quantity = parseInt(inputField.val());
				var maxQuantity = parseInt(inputField.attr('max'));
				var productId = parseInt(inputField.data('product-id'));

				if (!isNaN(quantity) && !isNaN(maxQuantity) && quantity > maxQuantity) {
					var exceedsMessage = inputField.closest('tr').find('.exceeds-message');
					if (!exceedsMessage.length) {
						exceedsMessage = $('<span class="exceeds-message text-danger">Exceeds available quantity!</span>');
						inputField.after(exceedsMessage);
					} else {
						exceedsMessage.show();
					}
				} else {
					inputField.closest('tr').find('.exceeds-message').hide();
				}

				if (!isNaN(productId) && quantity && productQuantity[productId]) {
					var totalQuantity = quantity;
					var productQuantityAvailable = productQuantity[productId];

					if (totalQuantity > productQuantityAvailable) {
						var exceedsMessage = inputField.closest('tr').find('.exceeds-message');
						if (!exceedsMessage.length) {
							exceedsMessage = $('<span class="exceeds-message text-danger">Exceeded quantity!</span>');
							inputField.after(exceedsMessage);
						} else {
							exceedsMessage.show();
						}
					} else {
						inputField.closest('tr').find('.exceeds-message').hide();
					}
				}
			}

			function updatePrice(inputField) {
				var quantity = parseInt(inputField.val());
				var price = parseFloat(inputField.data('price'));
				var totalPrice = quantity * price;
				inputField.closest('tr').find('.price').text(totalPrice.toFixed(2));
				calculateTotalPrice();
			}

			// Calculate the total price
			function calculateTotalPrice() {
				var totalPrice = 0;
				$('.quantity-field').each(function () {
					var quantity = parseInt($(this).val());
					var price = parseFloat($(this).data('price'));
					var subtotal = quantity * price;
					totalPrice += subtotal;
				});
				$('#total-price').text(totalPrice.toFixed(2));
				$('#hidden-total-price').val(totalPrice.toFixed(2));
				console.log(totalPrice);
				console.log('@Model.Balance');
				if (totalPrice > '@Model.Balance') {
					$('#payment-button').hide();
					alert('Not enough balance. Please update your balance.');
				} else {
					$('#payment-button').show();
				}
			}

			calculateTotalPrice();

			
		});
	</script>

}